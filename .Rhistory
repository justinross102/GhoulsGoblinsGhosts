} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}
}
return(table)
}
head(data2)
data2 <- auto_grade(data2)
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}
}
auto_grade <- function(table) {
table$Grade <- 0
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}}
return(table)
}
data2 <- auto_grade(data2)
auto_grade <- function(table) {
table$Grade <- 0
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}}
return(table)
}
data2 <- auto_grade(data2)
library(RMySQL)
library(tidyverse)
library(vroom)
args <- commandArgs(TRUE)
form <- args[1]
mydb <- dbConnect(MySQL(), user = 'stat226', password = 'cougars19', dbname = 'Stat226', host = 'statdb.byu.edu')
query1 <- paste("SELECT s.StudentID, s.Score, s.Form, d.Domain_num
FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM =", shQuote(form),
"ORDER BY StudentID")
result1 <- dbSendQuery(mydb, query1)
data1 <- fetch(result1, n=-1)
# Find out which Domain_num has the lowest mean score. You will
# answer a question about this on a quiz but dont write this table to
# SQL_Final (In this scenario you are the professor and you want to find
# out which topic you need to teach the students better.) (5 points)
data1 %>%
group_by(Domain_num) %>%
summarise(StudentID = first(StudentID), mean_Score = mean(Score)) %>%
arrange(mean_Score)
query2 <- paste("SELECT s.StudentID, SUM(Score) AS Score, SUM(Score)/150 AS Percentages
FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM =", shQuote(form),
"GROUP BY s.StudentID")
result2 <- dbSendQuery(mydb, query2)
data2 <- fetch(result2, n=-1)
auto_grade <- function(table) {
table$Grade <- 0
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}
}
return(table)
}
# add letter grade column via auto_grade function
data2 <- auto_grade(data2)
library(RMySQL)
library(tidyverse)
library(vroom)
mydb <- dbConnect(MySQL(), user = 'stat226', password = 'cougars19', dbname = 'Stat226', host = 'statdb.byu.edu')
query1 <- paste("SELECT s.StudentID, s.Score, s.Form, d.Domain_num
FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM = 'D'
ORDER BY StudentID")
result1 <- dbSendQuery(mydb, query1)
data1 <- fetch(result1, n=-1)
data1
library(RMySQL)
library(tidyverse)
library(vroom)
mydb <- dbConnect(MySQL(), user = 'stat226', password = 'cougars19', dbname = 'Stat226', host = 'statdb.byu.edu')
query1 <- paste("SELECT s.StudentID, s.Score, s.Form, d.Domain_num
FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM = 'D'
ORDER BY StudentID")
result1 <- dbSendQuery(mydb, query1)
data1 <- fetch(result1, n=-1)
head(data1)
query <- "SELECT StudentID, SUM(Score) AS Total_Score, SUM(Score)/150
FROM Students
WHERE Form = 'D'
GROUP BY Student ID;"
query <- "SELECT StudentID, SUM(Score) AS Total_Score, SUM(Score)/150
FROM Students
WHERE Form = 'D'
GROUP BY StudentID;"
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
head(data)
query <- "SELECT StudentID, SUM(Score) AS Total_Score, SUM(Score)/150 AS Percentage
FROM Students
WHERE Form = 'D'
GROUP BY StudentID;"
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
head(data)
auto_grade <- function(newdata, column){
newdata$column <- 0
for (i in 1:nrow(newdata)) {
if (newdata$Percentage[i] >= 0.90) {
newdata$column[i] <- 'A'
} else if (newdata$Percentage[i] >= 0.80 & newdata$Percentage[i] < 0.90) {
newdata$column[i] <- 'B'
} else if (newdata$Percentage[i] >= 0.70 & newdata$Percentage[i] < 0.80) {
newdata$column[i] <- 'C'
} else if (newdata$Percentage[i] >= 0.60 & newdata$Percentage[i] < 0.70) {
newdata$column[i] <- 'D'
} else {
newdata$column[i] <- 'F'
}
}
}
head(data)
auto_grade <- function(newdata, column){
newdata$column <- 0
for (i in 1:nrow(newdata)) {
if (newdata$Percentage[i] >= 0.90) {
newdata$column[i] <- 'A'
} else if (newdata$Percentage[i] >= 0.80 & newdata$Percentage[i] < 0.90) {
newdata$column[i] <- 'B'
} else if (newdata$Percentage[i] >= 0.70 & newdata$Percentage[i] < 0.80) {
newdata$column[i] <- 'C'
} else if (newdata$Percentage[i] >= 0.60 & newdata$Percentage[i] < 0.70) {
newdata$column[i] <- 'D'
} else {
newdata$column[i] <- 'F'
}
}
}
head(data)
data <- auto_grade(data, Grade)
head(data)
data <- auto_grade(newdata = data, column = Grade)
head(data)
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
newdata$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
}
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
input1$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
}
data <- auto_grade(input1 = data, input2 = Grade)
query <- "SELECT StudentID, SUM(Score) AS Total_Score, SUM(Score)/150 AS Percentage
FROM Students
WHERE Form = 'D'
GROUP BY StudentID;"
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
input1$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
}
data <- auto_grade(input1 = data, input2 = Grade)
head(data)
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
input1$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
return(input1)
}
data <- auto_grade(input1 = data, input2 = Grade)
head(data)
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(input1, input2){
input1$input2 <- 0
for (i in 1:nrow(input1)) {
if (input1$Percentage[i] >= 0.90) {
input1$input2[i] <- 'A'
} else if (input1$Percentage[i] >= 0.80 & input1$Percentage[i] < 0.90) {
input1$input2[i] <- 'B'
} else if (input1$Percentage[i] >= 0.70 & input1$Percentage[i] < 0.80) {
input1$input2[i] <- 'C'
} else if (input1$Percentage[i] >= 0.60 & input1$Percentage[i] < 0.70) {
input1$input2[i] <- 'D'
} else {
input1$input2[i] <- 'F'
}
}
return(input1)
}
data <- auto_grade(data, Grade)
head(data)
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(table) {
table$Grade <- 0
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}
}
return(table)
}
data <- auto_grade(data, Grade)
head(data)
result <- dbSendQuery(mydb, query)
data <- fetch(result, n=-1)
auto_grade <- function(table) {
table$Grade <- 0
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}
}
return(table)
}
data <- auto_grade(data)
library(RMySQL)
library(tidyverse)
library(vroom)
query1 <- paste("SELECT s.StudentID, s.Score, s.Form, d.Domain_num
FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM = 'D'
ORDER BY StudentID")
result1 <- dbSendQuery(mydb, query1)
data1 <- fetch(result1, n=-1)
query2 <- paste("SELECT s.StudentID, SUM(Score) AS Score, SUM(Score)/150 AS Percentages
FROM Students s, Domain d
WHERE (s.Form = d.Form) AND (s.Qnum = d.Qnum)
AND s.FORM = 'D'
GROUP BY s.StudentID")
result2 <- dbSendQuery(mydb, query2)
data2 <- fetch(result2, n=-1)
data2
auto_grade <- function(table) {
table$Grade <- 0
for (i in 1:nrow(table)) {
if (table$Percentages[i] >= 0.90 & table$Percentages[i] <= 1.0) {
table$Grade[i] <- 'A'
} else if (table$Percentages[i] >= 0.80 & table$Percentages[i] < 0.90) {
table$Grade[i] <- 'B'
} else if (table$Percentages[i] >= 0.70 & table$Percentages[i] < 0.80) {
table$Grade[i] <- 'C'
} else if (table$Percentages[i] >= 0.60 & table$Percentages[i] < 0.70) {
table$Grade[i] <- 'D'
} else {
table$Grade[i] <- 'F'
}
}
return(table)
}
# add letter grade column via auto_grade function
data2 <- auto_grade(data2)
head(data2)
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='Johnwilliams102', dbname='stats286_sqlfinal', host='localhost')
avg_grade = dbSendQuery(mydb,
"SELECT AVG(Percentages), STD(Percentages)
FROM Final_Results")
data = fetch(avg_grade, n=-1)
print(data)
mode_grade = dbSendQuery(mydb,
"SELECT Grade, Count(Grade)
FROM Final_Results
GROUP BY Grade
ORDER BY Count(Grade) DESC")
data = fetch(mode_grade, n=-1)
print(data)
# visualization
library(RMySQL)
library(tidyverse)
library(patchwork)
mydb <- dbConnect(MySQL(), user = 'root', password = 'Johnwilliams102',
dbname = 'stats286_sqlfinal', host = 'localhost')
result <- dbSendQuery(mydb, "select * from Final_Results")
data <- fetch(result, n=-1)
head(data)
plot1 <- data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot1
data$Grade <- factor(data$Grade, levels = c("A", "B", "C", "D", "F"))
plot1 <- data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot1
head(data)
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
mydb <- dbConnect(MySQL(), user = 'root', password = 'Johnwilliams102',
dbname = 'stats286_sqlfinal', host = 'localhost')
result <- dbSendQuery(mydb, "select * from Final_Results")
data <- fetch(result, n=-1)
head(data)
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
data$Grade <- factor(data$Grade, levels = c("A", "B", "C", "D", "F"))
data$Curved_Grade <- factor(data$Curved_Grade, levels = c("A", "B", "C", "D", "F"))
data$Grade <- factor(data$Grade, levels = c("A", "B", "C", "D", "F"))
data$Curved_Grade <- factor(data$Curved_Grade, levels = c("A", "B", "C", "D", "F"))
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar()
data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
data %>%
ggplot(mapping = aes(Curved_Grade, fill = Curved_Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot1 + plot2
plot1 <- data %>%
ggplot(mapping = aes(Grade, fill = Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot2 <- data %>%
ggplot(mapping = aes(Curved_Grade, fill = Curved_Grade)) +
geom_bar() +
scale_x_discrete(drop = FALSE)  # This ensures that all levels are displayed
plot1 + plot2
(plot1 + plot2) / plo2
(plot1 + plot2) / plot2
(plot1 + plot2) / plot2 + plot1
(plot1 + plot2) / (plot2 + plot1)
both <- (plot1 + plot2)
(plot1 + plot2)
# load necessary libraries
library(tidyverse)
library(tidymodels)
library(vroom) # reading and writing file
library(embed) # target encoding
library(discrim) # naive bayes
setwd("~/Documents/BYU/stat348/GhoulsGoblinsGhosts")
train <- vroom("train.csv") %>%
mutate(type = as.factor(type)) %>%
select(-c(color))
test <- vroom("test.csv") %>%  # already has 'type' removed
select(-c(color))
basic_recipe <- recipe(type ~ ., train)
nb_mod <- naive_Bayes(Laplace = tune(),
smoothness = tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_wf <- workflow() %>%
add_recipe(basic_recipe) %>%
add_model(nb_mod)
# cross validation
nb_tuning_grid <- grid_regular(Laplace(),
smoothness(),
levels = 6)
rand_forest_mod <- rand_forest(mtry = tune(),
min_n=tune(),
trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
rand_forest_wf <- workflow() %>%
add_recipe(basic_recipe) %>%
add_model(rand_forest_mod)
rand_forest_tuning_grid <- grid_regular(mtry(range = c(1, (ncol(train)-1))),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# stacking ----------------------------------------------------------------
library(stacks)
folds <- vfold_cv(train, v = 5, repeats=1)
untunedModel <- control_stack_grid()
rf_models <- rand_forest_wf %>%
tune_grid(resamples=folds,
grid=rand_forest_tuning_grid,
metrics=metric_set(roc_auc),
control = untunedModel)
nb_models <- nb_wf %>%
tune_grid(resamples=folds,
grid=nb_tuning_grid,
metrics=metric_set(roc_auc),
control = untunedModel)
# Specify with models to include
my_stack <- stacks() %>%
add_candidates(rf_models) %>%
add_candidates(nb_models)
## Fit the stacked model
stack_mod <- my_stack %>%
blend_predictions() %>% # LASSO penalized regression meta-learner
fit_members() ## Fit the members to the dataset
predictions <- stack_mod %>%
predict(new_data = test,
type = "class")
submission <- predictions %>%
mutate(id = test$id) %>%
rename("type" = ".pred_class") %>%
select(2,1)
vroom_write(submission, "stacked_predictions.csv", delim = ',')
